package com.kankan.player.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kankan.player.dao.model.TDVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TDVIDEO.
*/
public class TDVideoDao extends AbstractDao<TDVideo, Long> {

    public static final String TABLENAME = "TDVIDEO";

    /**
     * Properties of entity TDVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, String.class, "cid", false, "CID");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(4, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property FileType = new Property(6, Integer.class, "fileType", false, "FILE_TYPE");
        public final static Property Islooked = new Property(7, Boolean.class, "islooked", false, "ISLOOKED");
    };


    public TDVideoDao(DaoConfig config) {
        super(config);
    }
    
    public TDVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TDVIDEO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CID' TEXT," + // 1: cid
                "'FILE_PATH' TEXT NOT NULL UNIQUE ," + // 2: filePath
                "'FILE_NAME' TEXT," + // 3: fileName
                "'FILE_SIZE' INTEGER," + // 4: fileSize
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'FILE_TYPE' INTEGER," + // 6: fileType
                "'ISLOOKED' INTEGER);"); // 7: islooked
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TDVIDEO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TDVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
        stmt.bindString(3, entity.getFilePath());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(5, fileSize);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Integer fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindLong(7, fileType);
        }
 
        Boolean islooked = entity.getIslooked();
        if (islooked != null) {
            stmt.bindLong(8, islooked ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TDVideo readEntity(Cursor cursor, int offset) {
        TDVideo entity = new TDVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cid
            cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // fileType
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // islooked
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TDVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFileType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIslooked(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TDVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TDVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
