package com.kankan.player.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kankan.player.dao.model.video;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VIDEO.
*/
public class videoDao extends AbstractDao<video, Void> {

    public static final String TABLENAME = "VIDEO";

    /**
     * Properties of entity video.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FilePath = new Property(0, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property Width = new Property(2, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, Integer.class, "height", false, "HEIGHT");
        public final static Property Duration = new Property(4, Integer.class, "duration", false, "DURATION");
        public final static Property Progress = new Property(5, Integer.class, "progress", false, "PROGRESS");
        public final static Property ThumbnailPath = new Property(6, String.class, "thumbnailPath", false, "THUMBNAIL_PATH");
        public final static Property ScanTime = new Property(7, long.class, "scanTime", false, "SCAN_TIME");
        public final static Property DeviceName = new Property(8, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceType = new Property(9, Integer.class, "deviceType", false, "DEVICE_TYPE");
    };


    public videoDao(DaoConfig config) {
        super(config);
    }
    
    public videoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VIDEO' (" + //
                "'FILE_PATH' TEXT NOT NULL UNIQUE ," + // 0: filePath
                "'FILE_NAME' TEXT," + // 1: fileName
                "'WIDTH' INTEGER," + // 2: width
                "'HEIGHT' INTEGER," + // 3: height
                "'DURATION' INTEGER," + // 4: duration
                "'PROGRESS' INTEGER," + // 5: progress
                "'THUMBNAIL_PATH' TEXT," + // 6: thumbnailPath
                "'SCAN_TIME' INTEGER NOT NULL ," + // 7: scanTime
                "'DEVICE_NAME' TEXT," + // 8: deviceName
                "'DEVICE_TYPE' INTEGER);"); // 9: deviceType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, video entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFilePath());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(5, duration);
        }
 
        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(6, progress);
        }
 
        String thumbnailPath = entity.getThumbnailPath();
        if (thumbnailPath != null) {
            stmt.bindString(7, thumbnailPath);
        }
        stmt.bindLong(8, entity.getScanTime());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(9, deviceName);
        }
 
        Integer deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindLong(10, deviceType);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public video readEntity(Cursor cursor, int offset) {
        video entity = new video( //
            cursor.getString(offset + 0), // filePath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // width
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // progress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumbnailPath
            cursor.getLong(offset + 7), // scanTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // deviceType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, video entity, int offset) {
        entity.setFilePath(cursor.getString(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDuration(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProgress(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setThumbnailPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScanTime(cursor.getLong(offset + 7));
        entity.setDeviceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(video entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(video entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
