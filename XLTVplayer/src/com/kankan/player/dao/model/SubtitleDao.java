package com.kankan.player.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kankan.player.dao.model.Subtitle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUBTITLE.
*/
public class SubtitleDao extends AbstractDao<Subtitle, Long> {

    public static final String TABLENAME = "SUBTITLE";

    /**
     * Properties of entity Subtitle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, String.class, "cid", false, "CID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Language = new Property(3, String.class, "language", false, "LANGUAGE");
        public final static Property Rate = new Property(4, Integer.class, "rate", false, "RATE");
        public final static Property Display = new Property(5, String.class, "display", false, "DISPLAY");
        public final static Property Downloadurl = new Property(6, String.class, "downloadurl", false, "DOWNLOADURL");
        public final static Property Localpath = new Property(7, String.class, "localpath", false, "LOCALPATH");
        public final static Property Svote = new Property(8, Integer.class, "svote", false, "SVOTE");
        public final static Property Offset = new Property(9, Long.class, "offset", false, "OFFSET");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
        public final static Property Selected = new Property(11, Boolean.class, "selected", false, "SELECTED");
    };


    public SubtitleDao(DaoConfig config) {
        super(config);
    }
    
    public SubtitleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUBTITLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CID' TEXT NOT NULL ," + // 1: cid
                "'NAME' TEXT," + // 2: name
                "'LANGUAGE' TEXT," + // 3: language
                "'RATE' INTEGER," + // 4: rate
                "'DISPLAY' TEXT," + // 5: display
                "'DOWNLOADURL' TEXT," + // 6: downloadurl
                "'LOCALPATH' TEXT," + // 7: localpath
                "'SVOTE' INTEGER," + // 8: svote
                "'OFFSET' INTEGER," + // 9: offset
                "'TYPE' INTEGER," + // 10: type
                "'SELECTED' INTEGER);"); // 11: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUBTITLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Subtitle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(4, language);
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(5, rate);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(6, display);
        }
 
        String downloadurl = entity.getDownloadurl();
        if (downloadurl != null) {
            stmt.bindString(7, downloadurl);
        }
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(8, localpath);
        }
 
        Integer svote = entity.getSvote();
        if (svote != null) {
            stmt.bindLong(9, svote);
        }
 
        Long offset = entity.getOffset();
        if (offset != null) {
            stmt.bindLong(10, offset);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(12, selected ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Subtitle readEntity(Cursor cursor, int offset) {
        Subtitle entity = new Subtitle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // language
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // display
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // downloadurl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // localpath
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // svote
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // offset
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // selected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Subtitle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLanguage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDisplay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownloadurl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocalpath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSvote(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOffset(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSelected(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Subtitle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Subtitle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
