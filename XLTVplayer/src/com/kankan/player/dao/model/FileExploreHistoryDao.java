package com.kankan.player.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kankan.player.dao.model.FileExploreHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FILE_EXPLORE_HISTORY.
*/
public class FileExploreHistoryDao extends AbstractDao<FileExploreHistory, Long> {

    public static final String TABLENAME = "FILE_EXPLORE_HISTORY";

    /**
     * Properties of entity FileExploreHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileCategory = new Property(2, Integer.class, "fileCategory", false, "FILE_CATEGORY");
        public final static Property DeviceName = new Property(3, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceType = new Property(4, Integer.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property FileSize = new Property(5, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property LastModifyTime = new Property(6, Long.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property DevicePath = new Property(7, String.class, "devicePath", false, "DEVICE_PATH");
        public final static Property DeviceSize = new Property(8, Long.class, "deviceSize", false, "DEVICE_SIZE");
        public final static Property Cid = new Property(9, String.class, "cid", false, "CID");
    };


    public FileExploreHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public FileExploreHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FILE_EXPLORE_HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FILE_PATH' TEXT NOT NULL ," + // 1: filePath
                "'FILE_CATEGORY' INTEGER," + // 2: fileCategory
                "'DEVICE_NAME' TEXT," + // 3: deviceName
                "'DEVICE_TYPE' INTEGER," + // 4: deviceType
                "'FILE_SIZE' INTEGER," + // 5: fileSize
                "'LAST_MODIFY_TIME' INTEGER," + // 6: lastModifyTime
                "'DEVICE_PATH' TEXT," + // 7: devicePath
                "'DEVICE_SIZE' INTEGER," + // 8: deviceSize
                "'CID' TEXT);"); // 9: cid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FILE_EXPLORE_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FileExploreHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFilePath());
 
        Integer fileCategory = entity.getFileCategory();
        if (fileCategory != null) {
            stmt.bindLong(3, fileCategory);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        Integer deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindLong(5, deviceType);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(6, fileSize);
        }
 
        Long lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(7, lastModifyTime);
        }
 
        String devicePath = entity.getDevicePath();
        if (devicePath != null) {
            stmt.bindString(8, devicePath);
        }
 
        Long deviceSize = entity.getDeviceSize();
        if (deviceSize != null) {
            stmt.bindLong(9, deviceSize);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(10, cid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FileExploreHistory readEntity(Cursor cursor, int offset) {
        FileExploreHistory entity = new FileExploreHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // filePath
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // fileCategory
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // deviceType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // fileSize
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lastModifyTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // devicePath
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // deviceSize
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // cid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FileExploreHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilePath(cursor.getString(offset + 1));
        entity.setFileCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDeviceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFileSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLastModifyTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDevicePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceSize(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FileExploreHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FileExploreHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
